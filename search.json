[{"path":[]},{"path":"https://iSEE.github.io/iUSEiSEE/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 iUSEiSEE authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d00_about_this_workshop.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"About this workshop","text":"iSEE Bioconductor package (Rue-Albrecht et al. 2018) flexible, powerful extensible application explore dataset stored SummarizedExperiment object, including single cell spatially resolved data, also bulk data (transcriptomics proteomics) many types non-biological data. iSEE enables multitude panels gain -depth insight data; combining interactivity reproducibility, provides ideal companion tools deeper dives data. workshop provides overview functionality iSEE package. material equally suitable use “masterclass-style” workshop self-study.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d00_about_this_workshop.html","id":"pre-requisites","dir":"Articles","previous_headings":"","what":"Pre-requisites","title":"About this workshop","text":"examples workshop center around bulk single-cell RNA sequencing data. reason, certain background knowledge types data questions typically addressed can helpful get content. precisely, following pre-requisities useful: Familiarity bulk single-cell sequencing data (ideally scRNA-seq). Familiarity SummarizedExperiment/SingleCellExperiment class, alternatively Seurat AnnData frameworks - basically, widely used ecosystem working /storing/processing single-cell data. Familiarity single-cell data visualizations representations.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d00_about_this_workshop.html","id":"participation","dir":"Articles","previous_headings":"","what":"Participation","title":"About this workshop","text":"Participants encouraged follow along live coding parts workshop - much intended hands-learning resource.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d00_about_this_workshop.html","id":"r-bioconductor-packages-used","dir":"Articles","previous_headings":"","what":"R / Bioconductor packages used","title":"About this workshop","text":"iSEE: https://bioconductor.org/packages/iSEE iSEEu: https://bioconductor.org/packages/iSEEu iSEEde: https://bioconductor.org/packages/iSEEde iSEEpathways: https://bioconductor.org/packages/iSEEpathways iSEEhub: https://bioconductor.org/packages/iSEEhub iSEEindex: https://bioconductor.org/packages/iSEEindex iSEEfier: https://bioconductor.org/packages/iSEEfier","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d00_about_this_workshop.html","id":"outline-of-the-workshop","dir":"Articles","previous_headings":"","what":"Outline of the workshop","title":"About this workshop","text":"following material available vignettes folder: Preparation - instructions installing required packages downloading example data. Overview iSEE - detailed overview iSEE functionality. iSEE cookbook - set self-contained recipes simple--advanced tasks one can complete within iSEE. Bonus advanced content around iSEE - additional content, focused advanced specific tasks carry iSEE. Extending iSEE - material focused extending iSEE creating new panel classes.","code":""},{"path":[]},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d00_about_this_workshop.html","id":"learning-goals","dir":"Articles","previous_headings":"Workshop goals and objectives","what":"Learning goals","title":"About this workshop","text":"Outline features iSEE, built upon R/Shiny framework. Utilize interactive GUI components layouts efficiently extract information biological data sets. Describe construct interactive apps custom panels. Demonstrate iSEE related packages can smoothly integrated enhance existing workflows datasets hand.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d00_about_this_workshop.html","id":"learning-objectives","dir":"Articles","previous_headings":"Workshop goals and objectives","what":"Learning objectives","title":"About this workshop","text":"Set local environment running iSEE apps. Interact components iSEE user interface visually inspect discuss various datasets. Identify locate configurable aspects iSEE apps. Practice interactive visualization single-cell RNA-sequencing workflow. Imagine use cases future developments interactive visualization part computational workflows. Design create iSEE instances collections datasets.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d00_about_this_workshop.html","id":"additional-resources","dir":"Articles","previous_headings":"","what":"Additional resources","title":"About this workshop","text":"lot materials developed, first use iSEE contributions new panel classes separate downstream packages. iSEE website: https://isee.github.io/ Publication (F1000Research, 2018): https://f1000research.com/articles/7-741/v1 Bioconductor landing page: https://bioconductor.org/packages/iSEE/ Development version (bug reports etc): https://github.com/iSEE/iSEE Material previous workshops: https://isee.github.io/resources.html#workshops Deployed examples: https://isee.github.io/apps.html, https://github.com/iSEE/iSEE_instances Custom panel examples: https://github.com/iSEE/iSEE_custom bookdown book Extending iSEE: https://isee.github.io/iSEE-book/","code":""},{"path":[]},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d01_preparation.html","id":"installing-and-loading-the-required-packages","dir":"Articles","previous_headings":"","what":"Installing and loading the required packages","title":"Preparation","text":"run content presented demo, make sure first run following chunk R session. install workshop package well required dependencies. Next, load packages used demo. Alternatively, loaded load workshop package , .e.: can also clone GitHub repository (https://github.com/iSEE/iUSEiSEE) locally using git clone - makes easy open follow along vignettes.","code":"install.packages(\"BiocManager\") BiocManager::install(\"iSEE/iUSEiSEE\",                       dependencies = TRUE,                       build_vignettes = TRUE) library(\"SingleCellExperiment\") library(\"iSEE\") library(\"TENxPBMCData\")  library(\"iSEEu\") library(\"iSEEhex\")  library(\"iSEEde\") library(\"iSEEpathways\")  library(\"iSEEhub\") library(\"iSEEindex\") library(\"iUSEiSEE\")"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d01_preparation.html","id":"load-example-data","dir":"Articles","previous_headings":"","what":"Load example data","title":"Preparation","text":"functionality covered workshop illustrated means single-cell RNA sequencing dataset included package. can load dataset follows: dataset already processed following established principles single-cell analysis Bioconductor. see processing done, consult script provided workflow package.","code":"sce <- readRDS(   file = system.file(\"datasets\", \"sce_pbmc3k.RDS\", package = \"iUSEiSEE\") )  sce #> class: SingleCellExperiment  #> dim: 32738 2643  #> metadata(0): #> assays(2): counts logcounts #> rownames(32738): MIR1302-10 FAM138A ... AC002321.2 AC002321.1 #> rowData names(19): ENSEMBL_ID Symbol_TENx ... FDR_cluster11 #>   FDR_cluster12 #> colnames(2643): Cell1 Cell2 ... Cell2699 Cell2700 #> colData names(24): Sample Barcode ... labels_ont cell_ontology_labels #> reducedDimNames(3): PCA TSNE UMAP #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d01_preparation.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Preparation","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] iUSEiSEE_1.0.0              iSEEindex_1.6.0             #>  [3] iSEEhub_1.10.0              ExperimentHub_2.16.1        #>  [5] AnnotationHub_3.16.1        BiocFileCache_2.16.1        #>  [7] dbplyr_2.5.0                iSEEpathways_1.6.0          #>  [9] iSEEde_1.6.0                iSEEu_1.20.0                #> [11] iSEEhex_1.10.0              TENxPBMCData_1.26.0         #> [13] HDF5Array_1.36.0            h5mread_1.0.1               #> [15] rhdf5_2.52.1                DelayedArray_0.34.1         #> [17] SparseArray_1.8.1           S4Arrays_1.8.1              #> [19] abind_1.4-8                 Matrix_1.7-3                #> [21] iSEE_2.20.0                 SingleCellExperiment_1.30.1 #> [23] SummarizedExperiment_1.38.1 Biobase_2.68.0              #> [25] GenomicRanges_1.60.0        GenomeInfoDb_1.44.1         #> [27] IRanges_2.42.0              S4Vectors_0.46.0            #> [29] BiocGenerics_0.54.0         generics_0.1.4              #> [31] MatrixGenerics_1.20.0       matrixStats_1.5.0           #> [33] BiocStyle_2.36.0            #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3      jsonlite_2.0.0          shape_1.4.6.1           #>   [4] magrittr_2.0.3          ggbeeswarm_0.7.2        farver_2.1.2            #>   [7] rmarkdown_2.29          GlobalOptions_0.1.2     fs_1.6.6                #>  [10] ragg_1.4.0              vctrs_0.6.5             memoise_2.0.1           #>  [13] htmltools_0.5.8.1       curl_7.0.0              BiocNeighbors_2.2.0     #>  [16] Rhdf5lib_1.30.0         sass_0.4.10             bslib_0.9.0             #>  [19] htmlwidgets_1.6.4       desc_1.4.3              httr2_1.2.1             #>  [22] listviewer_4.0.0        cachem_1.1.0            igraph_2.1.4            #>  [25] mime_0.13               lifecycle_1.0.4         iterators_1.0.14        #>  [28] pkgconfig_2.0.3         rsvd_1.0.5              colourpicker_1.3.0      #>  [31] R6_2.6.1                fastmap_1.2.0           GenomeInfoDbData_1.2.14 #>  [34] shiny_1.11.1            clue_0.3-66             digest_0.6.37           #>  [37] colorspace_2.1-1        paws.storage_0.9.0      AnnotationDbi_1.70.0    #>  [40] scater_1.36.0           DESeq2_1.48.1           irlba_2.3.5.1           #>  [43] textshaping_1.0.1       RSQLite_2.4.2           beachmat_2.24.0         #>  [46] filelock_1.0.3          urltools_1.7.3.1        httr_1.4.7              #>  [49] mgcv_1.9-3              compiler_4.5.1          bit64_4.6.0-1           #>  [52] doParallel_1.0.17       BiocParallel_1.42.1     viridis_0.6.5           #>  [55] DBI_1.2.3               shinyAce_0.4.4          hexbin_1.28.5           #>  [58] rappdirs_0.3.3          rjson_0.2.23            tools_4.5.1             #>  [61] vipor_0.4.7             beeswarm_0.4.0          httpuv_1.6.16           #>  [64] glue_1.8.0              nlme_3.1-168            rhdf5filters_1.20.0     #>  [67] promises_1.3.3          grid_4.5.1              cluster_2.1.8.1         #>  [70] gtable_0.3.6            ScaledMatrix_1.16.0     BiocSingular_1.24.0     #>  [73] XVector_0.48.0          stringr_1.5.1           ggrepel_0.9.6           #>  [76] BiocVersion_3.21.1      foreach_1.5.2           pillar_1.11.0           #>  [79] limma_3.64.3            later_1.4.2             rintrojs_0.3.4          #>  [82] circlize_0.4.16         splines_4.5.1           dplyr_1.1.4             #>  [85] lattice_0.22-7          bit_4.6.0               paws.common_0.8.5       #>  [88] tidyselect_1.2.1        ComplexHeatmap_2.24.1   locfit_1.5-9.12         #>  [91] scuttle_1.18.0          Biostrings_2.76.0       miniUI_0.1.2            #>  [94] knitr_1.50              gridExtra_2.3           edgeR_4.6.3             #>  [97] xfun_0.53               shinydashboard_0.7.3    statmod_1.5.0           #> [100] DT_0.33                 stringi_1.8.7           UCSC.utils_1.4.0        #> [103] yaml_2.3.10             shinyWidgets_0.9.0      evaluate_1.0.4          #> [106] codetools_0.2-20        tibble_3.3.0            BiocManager_1.30.26     #> [109] cli_3.6.5               xtable_1.8-4            systemfonts_1.2.3       #> [112] jquerylib_0.1.4         Rcpp_1.1.0              triebeard_0.4.1         #> [115] png_0.1-8               parallel_4.5.1          pkgdown_2.1.3           #> [118] ggplot2_3.5.2           blob_1.2.4              viridisLite_0.4.2       #> [121] scales_1.4.0            crayon_1.5.3            GetoptLong_1.0.5        #> [124] rlang_1.1.6             KEGGREST_1.48.1         shinyjs_2.1.0"},{"path":[]},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An overview of iSEE","text":"vignette provides overview graphical interface iSEE applications (Rue-Albrecht et al. 2018). follow along, make sure launch default iSEE instance described next code block start following section. Note default configuration, panels look exactly like ones shown screenshots see . example, data points immediately colored, default annotation variables displayed panel may differ. hands-recipes workshop workshop demonstrate modify content panels, displayed. Note simplicity, typically refer SummarizedExperiment workshop; however, iSEE works seamlessly objects class extending SummarizedExperiment well (e.g., SingleCellExperiment, DESeqDataSet). said, types panels – Reduced dimension plot – available objects contain reducedDim slot (particular, SingleCellExperiment objects); basic SummarizedExperiment class contain slot. workshop, refer rows SummarizedExperiment object ‘features’ (can genes, transcripts, genomic regions, etc) columns ‘samples’ (, example data set, single cells).","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"default-app","dir":"Articles","previous_headings":"","what":"The default iSEE app","title":"An overview of iSEE","text":"Using demonstration data set, can launch iSEE instance exploring data set using iSEE() function without argument. produce app using default configuration; , app instance include one panel built-class relevant information available SummarizedExperiment object.  main argument iSEE() function SummarizedExperiment object, object class extending SummarizedExperiment (SingleCellExperiment, case). restrictions made type data stored object, iSEE can used interactive visualization many different types data. also worth noting various types data, Bioconductor packages provides functionality directly importing quantifications generated external software packages SummarizedExperiment object. example, DropletUtils package can read quantifications 10x Genomics CellRanger pipeline single-cell RNA-seq data, tximeta package can used read data transcript quantification pipelines SummarizedExperiment object. addition, SummarizedExperiment objects can generated converting object types, Seurat AnnData objects - see interoperability section information. make explicit use workshop, note also possible call iSEE() without providing SummarizedExperiment object. case, user prompted upload object, serialized .rds file. also possible import specification initial panel setup.","code":"library(\"iSEE\") sce <- readRDS(   file = system.file(\"datasets\", \"sce_pbmc3k.RDS\", package = \"iUSEiSEE\") ) app <- iSEE(sce) shiny::runApp(app) app <- iSEE() shiny::runApp(app)"},{"path":[]},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"the-panel-hierarchy","dir":"Articles","previous_headings":"The built-in panel types","what":"The panel hierarchy","title":"An overview of iSEE","text":"iSEE user interface (UI) consists number panels, displaying data provided SummarizedExperiment specific perspective. 8 standard panel types; 6 plot panels 2 table panels, showcased figure shown start previous section. default configuration, one panel type included launching iSEE user interface. However, users free rearrange, resize, remove add panels freely, demonstrated separate vignette workshop recipes. provide brief overview panel type following subsections. addition 8 standard panel types included iSEE, users can create custom panels (plots tables). Moreover, iSEEu (iSEE universe) package contains additional panel types. creation configuration custom panels also demonstrated series workshop advanced recipes. Specifically, iSEE panels implemented hierarchy S4 classes. concrete classes (orange) may instantiated panels user interface; virtual classes (grey) provide functionality shared families panels (e.g., sample-oriented plots, feature-oriented tables).","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"reddimplot","dir":"Articles","previous_headings":"The built-in panel types","what":"Reduced dimension plot","title":"An overview of iSEE","text":"reduced dimension plot can display reduced dimension representation present reducedDim slot SingleCellExperiment object. Note slot defined base SummarizedExperiment class, case user interface allow inclusion panels type.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"coldataplot","dir":"Articles","previous_headings":"The built-in panel types","what":"Column data plot","title":"An overview of iSEE","text":"column data plot can display one two provided column annotations (colData slot). Depending class selected annotations, panel shows either scatter plot, violin plot, Hinton diagram (Hinton Shallice 1991; Bremner, Gotts, Denham 1994).","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"rowdataplot","dir":"Articles","previous_headings":"The built-in panel types","what":"Row data plot","title":"An overview of iSEE","text":"Analogous column data plot , row data plot displays one two provided row annotations (rowData slot). Depending class selected annotations, panel displays either scatter plot, violin plot, Hinton plot.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"heatmap","dir":"Articles","previous_headings":"The built-in panel types","what":"Complex heatmap","title":"An overview of iSEE","text":"complex heatmap panel displays, assay, observed values subset features across samples.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"featassayplot","dir":"Articles","previous_headings":"The built-in panel types","what":"Feature assay plot","title":"An overview of iSEE","text":"feature assay plot displays observed values one feature across samples. also possible plot observed values two features, scatter plot.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"sampassayplot","dir":"Articles","previous_headings":"The built-in panel types","what":"Sample assay plot","title":"An overview of iSEE","text":"Analogous Feature assay plot , Sample assay plot shows observed values features, one samples. also possible plot observed values two samples, scatter plot.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"rowdatatable","dir":"Articles","previous_headings":"The built-in panel types","what":"Row data table","title":"An overview of iSEE","text":"row data table displays information provided rowData slot SummarizedExperiment object, leveraging interactivity provided DT package.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"coldatatable","dir":"Articles","previous_headings":"The built-in panel types","what":"Column data table","title":"An overview of iSEE","text":"Analogous Row data table , column data table displays information provided colData slot SummarizedExperiment object.","code":""},{"path":[]},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"data-parameters-box","dir":"Articles","previous_headings":"Collapsible boxes with display controls","what":"Data parameters","title":"An overview of iSEE","text":"plot panel type Data parameters collapsible box. box different content panel type, cases lets user control data displayed plot.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"visual-parameters-box","dir":"Articles","previous_headings":"Collapsible boxes with display controls","what":"Visual parameters","title":"An overview of iSEE","text":"contrast Data parameters collapsible box lets users control displayed plot, Visual parameters box lets users control information displayed. collapsible box contains controls change size, shape, opacity, color points, facet plot available categorical annotation, subsample points increased speed plot rendering, control legends displayed.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"selection-parameter-box","dir":"Articles","previous_headings":"Collapsible boxes with display controls","what":"Selection parameters","title":"An overview of iSEE","text":"Selection parameters collapsible box provides controls transfer selections points (features samples) panels. demonstrate examples point transmission separate vignette workshop recipes","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"additional-controls","dir":"Articles","previous_headings":"","what":"Additional controls","title":"An overview of iSEE","text":"top-right corner iSEE application, users can find additional controls reproducibility, configuration, help.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"organize-panels","dir":"Articles","previous_headings":"Additional controls","what":"Organize panels","title":"An overview of iSEE","text":"mentioned , default behaviour iSEE() function launch instance user interface displays one panel standard types (provided underlying data available, e.g. reduced dimension plots reducedDim slot required). However, cases desirable multiple panels type, /exclude panel types. order accommodate situations, users can add, remove, change order resize panels via Organization menu top-right corner. Clicking selectize box listing current panels present drop-menu can choose additional panels add. Similarly, panels can removed clicking  icon associated panel name. panel can individually resized changing width height. Note total width row interface 12 units. width panel greater space available, panel moved new row.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"examine-panel-chart","dir":"Articles","previous_headings":"Additional controls","what":"Linking panels and transmitting point selections","title":"An overview of iSEE","text":"exploring data, often useful able select subset points investigate different aspects characteristic features. iSEE, can achieved selecting points one panel, transmitting selection one panels. brushing point selection can also programmatically preconfigured. button Examine panel chart display graph reports active point transmission panels app.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"download-output","dir":"Articles","previous_headings":"Additional controls","what":"Download panel output","title":"An overview of iSEE","text":"Download panel output button opens modal window listing current panels app. Checkboxes allow users select subset panels export. Finally, clicking Download button modal prompt app save plots PDF files, tables CSV files, package set files ZIP archive users can download save computer.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"extract-r-code","dir":"Articles","previous_headings":"Additional controls","what":"Extract R code","title":"An overview of iSEE","text":"fact data exploration done interactively reason forego reproducibility! end, iSEE lets export exact R code used create currently visible plots. Importantly, script reported iSEE contains short preamble needed set variable names used individual panels, including active brushes used transfer point selections.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"display-panel-settings","dir":"Articles","previous_headings":"Additional controls","what":"Display panel settings","title":"An overview of iSEE","text":"can take great amount time achieve satisfactory panel configuration. avoid need manually organize panels time app opened, iSEE offers possibility export code can reused later programmatically specify app initialized, well inspect export current panel settings future use.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"quick-tour","dir":"Articles","previous_headings":"Additional controls","what":"Quick tour","title":"An overview of iSEE","text":"One important aspect visualization ability share insights others. powerful way easily getting people unfamiliar data speed provide walkthrough interface different types plots displayed. iSEE, can achieved using tours. configure tour, need create text file two columns; named element intro, former describing UI element highlight step, latter providing descriptive text displayed. Clicking Quick tour button launches interactive tour interface using rintrojs package, highlighting specific elements user interface, labeled information instructions guiding users panels tasks specific individual apps.  can see live example complex tour action deployed apps exemplified iSEE website, example https://hbcc-nimh.shinyapps.io/shinyApp_JNS2023/.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"browse-vignettes","dir":"Articles","previous_headings":"Additional controls","what":"Open the vignette","title":"An overview of iSEE","text":"user interface navigation bar also includes button open introductory vignette iSEE browser. Depending version iSEE using, adaptively lead locally built vignette present computer, release devel version Bioconductor package landing page, e.g. <Bioconductor 3.21>.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"app-session-info","dir":"Articles","previous_headings":"Additional controls","what":"Session information","title":"An overview of iSEE","text":"button displays output sessionInfo(), useful piece information report reporting issue app.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"about-isee","dir":"Articles","previous_headings":"Additional controls","what":"About iSEE","title":"An overview of iSEE","text":"button provides information authors iSEE, well citation information. use package, please use following citation information: Rue-Albrecht K, Marini F, Soneson C, Lun ATL (2018). “iSEE: Interactive SummarizedExperiment Explorer.” F1000Research, 7, 741. doi: 10.12688/f1000research.14966.1 (URL: https://doi.org/10.12688/f1000research.14966.1). BibTeX entry LaTeX users :","code":"@Article{,   title = {iSEE: Interactive SummarizedExperiment Explorer},   author = {Kevin Rue-Albrecht and Federico Marini and Charlotte Soneson and Aaron T. L. Lun},   publisher = {F1000 Research, Ltd.},   journal = {F1000Research},   year = {2018},   month = {Jun},   volume = {7},   pages = {741},   doi = {10.12688/f1000research.14966.1}, }"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"using-isee-what-can-you-do-with-it","dir":"Articles","previous_headings":"","what":"Using iSEE: what can you do with it?","title":"An overview of iSEE","text":"section, list number actions can perform help iSEE. Feel free try already! following vignettes go details many . Search Organize panels button. Try add remove panels, resize reorder existing ones. Remember click Apply settings afterwards. Show two Reduced dimension plot panels; one showing PCA representation, one showing t-SNE representation. Link together, points selected one highlighted . Start instance default set panels explore different types plots generated Feature assay plot panel using choices available two axes. Select set points one Feature assay plot panels, drawing rectangle around . open Selection parameters collapsible box another Feature assay plot panel, select Feature assay plot panel made point selection dropdown menu Receive column selection . Note points corresponding cells selected first panel highlighted receiving panel. can highlight points different ways changing Selection effect. iSEE can display active links transmitting point selections panel using “Examine panel chart” menu. Open Visual parameters collapsible box one Reduced dimension plot panels, set Color : Column data. Color cells Cluster, contains cluster labels assigned cells preprocessing step. Color cells log10-transformed number detected genes (log10_total). Set Color : Feature name one Reduced dimension plot panels, select one genes dropdown menu. can search gene interest typing dropdown box. Set Color : Sample name one Reduced dimension plots, use dropdown menu underneath change highlighted cell. Reduce point size increase transparency (.e. reduce value alpha attribute). Apply downsampling grid 100 horizontal vertical bins. , select region first panel transmit selection second one. Double-click area selected first panel zoom display view second panel. Double click anywhere panel zoom . Start iSEE default configuration. Click export icon () top-right corner, select ‘Display panel settings’. Copy code shown pop-window. Close app paste code R session. defines ‘initial’ list. launch new instance adding initial = initial iSEE call. Note app starts configuration closing. course, still possible continue exploring data interactively - changed starting configuration. Start iSEE one Column data plot one Row data plot panel. Start iSEE empty configuration. Click export icon () top-right corner, select ‘Extract R code’. Copy preamble code first plot pop-window. Close app paste code R session. Note recreates first plot app.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"modes-and-additional-panels","dir":"Articles","previous_headings":"","what":"Modes and additional panels","title":"An overview of iSEE","text":"iSEEu (“iSEE universe”) Bioconductor package defines additional custom panels predefined ‘modes’ (startup configurations) may useful specific applications. illustrate use reduced dimension mode, start application one reduced dimension panel reduced dimension representation input object.  Furthermore, since iSEE version 2.0.0, users can leverage implementation panels hierarchy S4 classes rapidly extend framework develop new types panels virtually unlimited freedom functionality. framework, new panel types can readily integrated apps alongside built-panel types immediately benefit panel functionality minimal effort, including capacity transmit selections panels. New panels may implemented extending core virtual class Panel directly full control user interface reactive observers; alternatively, often desirable developers inherit one concrete panel classes get essential functionality parent class “free”. Use cases demonstrating implementation new panels various levels complexity available Extending iSEE bookdown. example, Hexagonal reduced dimension plot - implemented iSEEhex package - demonstrates alternative downsampling strategy, summarizing data points hexagonal bins.  Another useful mode can use data, example using iSEE mass cytometry data, modeGating. launches app preconfigured multiple chain-linked feature expression plots interactive data exploration.  iSEEu also set extra panels can come handy different situations. example, iSEEu::AggregatedDotPlot implements aggregated dot plot feature/group combination represented dot. color dot scales mean assay value across samples given group, size dot scales proportion non-zero values across samples group. can alternative heatmap, example can seen chunks :  overview extension packages panels provide can found iSEE website: https://isee.github.io/panels.html.","code":"library(\"iSEEu\") #> Loading required package: iSEEhex app <- modeReducedDim(sce) shiny::runApp(app) library(\"iSEEhex\") app <- iSEE(sce, initial = list(   ReducedDimensionPlot(PanelWidth = 6L),   ReducedDimensionHexPlot(PanelWidth = 6L) )) shiny::runApp(app) # Select top variable genes ---- plot_count <- 6 rv <- rowVars(assay(sce, \"logcounts\")) top_var <- head(order(rv, decreasing=TRUE), plot_count*2) top_var_genes <- rownames(sce)[top_var]  plot_features <- data.frame(   x=head(top_var_genes, plot_count),   y=tail(top_var_genes, plot_count),   stringsAsFactors=FALSE )  # launch the app itself ----  app <- modeGating(sce,                    plotAssay = \"logcounts\",                   features = plot_features) shiny::runApp(app) app <- iSEE(   sce,    initial = list(     AggregatedDotPlot(       Assay = \"logcounts\",       ColumnDataLabel = \"labels_main\",       CustomRowsText = top_var_genes     )        ) )"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d02_iSEE_overview.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"An overview of iSEE","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] iSEEu_1.20.0                iSEEhex_1.10.0              #>  [3] iSEE_2.20.0                 SingleCellExperiment_1.30.1 #>  [5] SummarizedExperiment_1.38.1 Biobase_2.68.0              #>  [7] GenomicRanges_1.60.0        GenomeInfoDb_1.44.1         #>  [9] IRanges_2.42.0              S4Vectors_0.46.0            #> [11] BiocGenerics_0.54.0         generics_0.1.4              #> [13] MatrixGenerics_1.20.0       matrixStats_1.5.0           #> [15] BiocStyle_2.36.0            #>  #> loaded via a namespace (and not attached): #>  [1] rlang_1.1.6              magrittr_2.0.3           shinydashboard_0.7.3     #>  [4] clue_0.3-66              GetoptLong_1.0.5         compiler_4.5.1           #>  [7] mgcv_1.9-3               png_0.1-8                systemfonts_1.2.3        #> [10] vctrs_0.6.5              pkgconfig_2.0.3          shape_1.4.6.1            #> [13] crayon_1.5.3             fastmap_1.2.0            XVector_0.48.0           #> [16] fontawesome_0.5.3        promises_1.3.3           rmarkdown_2.29           #> [19] UCSC.utils_1.4.0         shinyAce_0.4.4           ragg_1.4.0               #> [22] xfun_0.53                cachem_1.1.0             jsonlite_2.0.0           #> [25] listviewer_4.0.0         later_1.4.2              DelayedArray_0.34.1      #> [28] parallel_4.5.1           cluster_2.1.8.1          R6_2.6.1                 #> [31] bslib_0.9.0              RColorBrewer_1.1-3       jquerylib_0.1.4          #> [34] Rcpp_1.1.0               iterators_1.0.14         knitr_1.50               #> [37] httpuv_1.6.16            Matrix_1.7-3             splines_4.5.1            #> [40] igraph_2.1.4             tidyselect_1.2.1         abind_1.4-8              #> [43] yaml_2.3.10              doParallel_1.0.17        codetools_0.2-20         #> [46] miniUI_0.1.2             lattice_0.22-7           tibble_3.3.0             #> [49] shiny_1.11.1             evaluate_1.0.4           desc_1.4.3               #> [52] circlize_0.4.16          pillar_1.11.0            BiocManager_1.30.26      #> [55] DT_0.33                  foreach_1.5.2            shinyjs_2.1.0            #> [58] ggplot2_3.5.2            sparseMatrixStats_1.20.0 scales_1.4.0             #> [61] xtable_1.8-4             glue_1.8.0               tools_4.5.1              #> [64] hexbin_1.28.5            colourpicker_1.3.0       fs_1.6.6                 #> [67] grid_4.5.1               colorspace_2.1-1         nlme_3.1-168             #> [70] GenomeInfoDbData_1.2.14  vipor_0.4.7              cli_3.6.5                #> [73] textshaping_1.0.1        S4Arrays_1.8.1           viridisLite_0.4.2        #> [76] ComplexHeatmap_2.24.1    dplyr_1.1.4              gtable_0.3.6             #> [79] rintrojs_0.3.4           sass_0.4.10              digest_0.6.37            #> [82] SparseArray_1.8.1        ggrepel_0.9.6            rjson_0.2.23             #> [85] htmlwidgets_1.6.4        farver_2.1.2             memoise_2.0.1            #> [88] htmltools_0.5.8.1        pkgdown_2.1.3            lifecycle_1.0.4          #> [91] httr_1.4.7               shinyWidgets_0.9.0       GlobalOptions_0.1.2      #> [94] mime_0.13"},{"path":[]},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The iSEE cookbook","text":"vignette consists series (independent) hands-recipes, aimed exploring capabilities iSEE (Rue-Albrecht et al. 2018) interactively programmatically. recipe consists short task screen shot desired appearance app instance created. recipe, provide set hints, well detailed instructions solve task interactively (clicking app) programmatically (directly setting launching desired app instance). general overview default iSEE panels, refer overview vignette. details panel classes associated slots, refer help pages respective panel class (e.g., ?ReducedDimensionPlot).","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"prepare-the-session","dir":"Articles","previous_headings":"","what":"Prepare the session","title":"The iSEE cookbook","text":"starting recipes, need load required packages demo data set.","code":"library(\"iSEE\") library(\"iSEEu\")  sce <- readRDS(   system.file(\"datasets\", \"sce_pbmc3k.RDS\", package = \"iUSEiSEE\") ) sce #> class: SingleCellExperiment  #> dim: 32738 2643  #> metadata(0): #> assays(2): counts logcounts #> rownames(32738): MIR1302-10 FAM138A ... AC002321.2 AC002321.1 #> rowData names(19): ENSEMBL_ID Symbol_TENx ... FDR_cluster11 #>   FDR_cluster12 #> colnames(2643): Cell1 Cell2 ... Cell2699 Cell2700 #> colData names(24): Sample Barcode ... labels_ont cell_ontology_labels #> reducedDimNames(3): PCA TSNE UMAP #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"the-cookbook","dir":"Articles","previous_headings":"","what":"The cookbook","title":"The iSEE cookbook","text":"follows list 11 small self-contained recipes, tries address one specific aim - provide accordingly simple, targeted solution.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"recipe-1-panel-organisation","dir":"Articles","previous_headings":"The cookbook","what":"Recipe 1: Panel organisation","title":"The iSEE cookbook","text":"Using pbmc3k data set, create app contains reduced dimension plot panel, row data plot panel column data plot panel. widths three panels 3, 4 5 units, respectively. Panels can added, removed resized via Organization button top right corner app. pre-specify panels included app, use initial argument iSEE(). can remind list slot names available panel class respective value using str() function instance panel object, e.g. str(ReducedDimensionPlot()). information different types panels, see overview vignette help pages respective panel classes. First open application default set panels. Click Organization button top right corner app, click Organize panels. pop-window appears, click little x next panels want remove (Reduced dimension plot 1, Column data plot 1 Row data plot 1). Drag drop remaining three panel names correct order. panel, set correct panel width modifying value Width dropdown menu. Click Apply settings.","code":"app <- iSEE(sce) shiny::runApp(app) app <- iSEE(sce, initial = list(   ReducedDimensionPlot(PanelWidth = 3L),   RowDataPlot(PanelWidth = 4L),   ColumnDataPlot(PanelWidth = 5L) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"recipe-2-data-parameters-configuration---selecting-columns-to-display","dir":"Articles","previous_headings":"The cookbook","what":"Recipe 2: Data parameters configuration - selecting columns to display","title":"The iSEE cookbook","text":"Using pbmc3k data set, visualize cell type assignment cluster membership, aim identify predominant cell type cluster. case, since cell annotations categorical, iSEE generate called Hinton plot. Column (case cell) annotations can visualized using ColumnDataPlot panel. cluster labels available Cluster column colData(sce). cell type assignments available labels_fine column colData(sce) (coarse-grained assignments provided labels_main column). iSEE automatically determine plot type depending type selected variables. First open application single ColumnDataPlot panel spanning full application window) ColumnDataPlot panel, click expand Data parameters collapsible box. Column interest (Y-axis), select label column (e.g., labels_fine). X-axis, select Column data, Column interest (X-axis), select Cluster.","code":"app <- iSEE(sce, initial = list(ColumnDataPlot(PanelWidth = 12L))) shiny::runApp(app) app <- iSEE(sce, list(   ColumnDataPlot(     PanelWidth = 12L, XAxis = \"Column data\",     YAxis = \"labels_fine\", XAxisColumnData = \"Cluster\"   ) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"recipe-3-data-parameters-configuration---displaying-multiple-reduced-dimension-representations","dir":"Articles","previous_headings":"The cookbook","what":"Recipe 3: Data parameters configuration - displaying multiple reduced dimension representations","title":"The iSEE cookbook","text":"Using pbmc3k data set, display tSNE UMAP representations next . Reduced dimension representations can displayed using ReducedDimensionPlot panels. reduced dimension representations SingleCellExperiment object can accessed name (reducedDimNames(sce) lists available representations). First open application two ReducedDimensionPlot panels, spanning half application window) first ReducedDimensionPlot panel, click expand Data parameters collapsible box. Type selection box, choose TSNE. second ReducedDimensionPlot panel, repeat procedure instead select UMAP.","code":"app <- iSEE(sce, initial = list(   ReducedDimensionPlot(PanelWidth = 6L),   ReducedDimensionPlot(PanelWidth = 6L) )) shiny::runApp(app) app <- iSEE(sce, initial = list(   ReducedDimensionPlot(PanelWidth = 6L, Type = \"TSNE\"),   ReducedDimensionPlot(PanelWidth = 6L, Type = \"UMAP\") ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"recipe-4-data-parameters-configuration---displaying-the-expression-of-a-specific-gene-across-clusters","dir":"Articles","previous_headings":"The cookbook","what":"Recipe 4: Data parameters configuration - displaying the expression of a specific gene across clusters","title":"The iSEE cookbook","text":"Using pbmc3k data set, plot distribution logcount values gene CD74 clusters. Gene expression values can displayed using FeatureAssayPlot panel. select gene, specify ID provided row names SingleCellExperiment. First open application FeatureAssayPlot panel, spanning full application window) FeatureAssayPlot panel, click expand Data parameters collapsible box. Y-axis feature, type select CD74. X-axis, select Column data, Column interest (X-axis), select Cluster.","code":"app <- iSEE(sce, initial = list(FeatureAssayPlot(PanelWidth = 12L))) shiny::runApp(app) app <- iSEE(sce, initial = list(   FeatureAssayPlot(     PanelWidth = 12L, XAxis = \"Column data\",     YAxisFeatureName = \"CD74\", XAxisColumnData = \"Cluster\"   ) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"recipe-5-visual-parameters-configuration---coloring-reduced-dimension-representations-by-cell-annotation","dir":"Articles","previous_headings":"The cookbook","what":"Recipe 5: Visual parameters configuration - coloring reduced dimension representations by cell annotation","title":"The iSEE cookbook","text":"Using pbmc3k data set, display two tSNE representations next . first one, color cells cluster label. second one, color cells log10 total UMI count (log10_total column colData(sce)). Reduced dimension representations can displayed using ReducedDimensionPlot panels. reduced dimension representations SingleCellExperiment object can accessed name (reducedDimNames(sce) lists available representations). cluster labels available Cluster column colData(sce). Point attributes can accessed Visual parameters collapsible box. display hide possible options, check corresponding checkboxes (Color, Shape, Size, Point). First open application two ReducedDimensionPlot panels, spanning half application window) ReducedDimensionPlot panel, click expand Data parameters collapsible box Type, choose TSNE. first ReducedDimensionPlot panel, click expand Visual parameters collapsible box. Make sure Color checkbox ticked. Color , select Column data. dropdown menu appears, select Cluster. second ReducedDimensionPlot panel, repeat procedure instead select log10_total.","code":"app <- iSEE(sce, initial = list(   ReducedDimensionPlot(PanelWidth = 6L),   ReducedDimensionPlot(PanelWidth = 6L) )) shiny::runApp(app) app <- iSEE(sce, initial = list(   ReducedDimensionPlot(     PanelWidth = 6L, Type = \"TSNE\",     ColorBy = \"Column data\",     ColorByColumnData = \"Cluster\"   ),   ReducedDimensionPlot(     PanelWidth = 6L, Type = \"TSNE\",     ColorBy = \"Column data\",     ColorByColumnData = \"log10_total\"   ) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"recipe-6-visual-parameters-configuration---coloring-reduced-dimension-representations-by-gene-expression","dir":"Articles","previous_headings":"The cookbook","what":"Recipe 6: Visual parameters configuration - coloring reduced dimension representations by gene expression","title":"The iSEE cookbook","text":"Using pbmc3k data set, display two tSNE representations next . first one, color cells logcounts expression level CD3D. second one, color cells logcounts expression level CD79B. Reduced dimension representations can displayed using ReducedDimensionPlot panels. reduced dimension representations SingleCellExperiment object can accessed name (reducedDimNames(sce) lists available representations). select gene, specify ID provided row names SingleCellExperiment. Point attributes can accessed Visual parameters collapsible box. display hide possible options, check corresponding checkboxes (Color, Shape, Size, Point). First open application two ReducedDimensionPlot panels, spanning half application window) ReducedDimensionPlot panel, click expand Data parameters collapsible box Type, choose TSNE. first ReducedDimensionPlot panel, click expand Visual parameters collapsible box. Make sure Color checkbox ticked. Color , select Feature name. dropdown menu appears, select type CD3D. second ReducedDimensionPlot panel, repeat procedure instead select CD79B.","code":"app <- iSEE(sce, initial = list(   ReducedDimensionPlot(PanelWidth = 6L),   ReducedDimensionPlot(PanelWidth = 6L) )) shiny::runApp(app) app <- iSEE(sce, initial = list(   ReducedDimensionPlot(     PanelWidth = 6L, Type = \"TSNE\",     ColorBy = \"Feature name\",     ColorByFeatureName = \"CD3D\"   ),   ReducedDimensionPlot(     PanelWidth = 6L, Type = \"TSNE\",     ColorBy = \"Feature name\",     ColorByFeatureName = \"CD79B\"   ) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"recipe-7-visual-parameters-configuration---changing-the-size-and-opacity-of-points","dir":"Articles","previous_headings":"The cookbook","what":"Recipe 7: Visual parameters configuration - changing the size and opacity of points","title":"The iSEE cookbook","text":"Using pbmc3k data set, display two tSNE representations next . first one, set point size 0.5. second one, set point size 3 opacity 0.2. Reduced dimension representations can displayed using ReducedDimensionPlot panels. reduced dimension representations SingleCellExperiment object can accessed name (reducedDimNames(sce) lists available representations). Point attributes can accessed Visual parameters collapsible box. display hide possible options, check corresponding checkboxes (Color, Shape, Size, Point). First open application two ReducedDimensionPlot panels, spanning half application window) ReducedDimensionPlot panel, click expand Data parameters collapsible box Type, choose TSNE. first ReducedDimensionPlot panel, click expand Visual parameters collapsible box. Make sure Size checkbox ticked. Size , select None. text box underneath, type 0.5. second ReducedDimensionPlot panel, click expand Visual parameters collapsible box. Make sure Size Point checkboxes ticked. Size , select None. text box underneath, type 3. Point opacity, drag slider 0.2.","code":"app <- iSEE(sce, initial = list(   ReducedDimensionPlot(PanelWidth = 6L),   ReducedDimensionPlot(PanelWidth = 6L) )) shiny::runApp(app) app <- iSEE(sce, initial = list(   ReducedDimensionPlot(     PanelWidth = 6L, Type = \"TSNE\",     PointSize = 0.5   ),   ReducedDimensionPlot(     PanelWidth = 6L, Type = \"TSNE\",     PointSize = 3, PointAlpha = 0.2   ) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"recipe-8-selection-configuration","dir":"Articles","previous_headings":"The cookbook","what":"Recipe 8: Selection configuration","title":"The iSEE cookbook","text":"Using pbmc3k data set, display expression (logcounts) CD3D across assigned clusters, well tSNE representation colored cluster label. Select cells logcount expression value CD3D (approximately) 0.5 4, highlight tSNE plot means transparency. Reduced dimension representations can displayed using ReducedDimensionPlot panels. reduced dimension representations SingleCellExperiment object can accessed name (reducedDimNames(sce) lists available representations). Gene expression values can displayed using FeatureAssayPlot panel. select gene, specify ID provided row names SingleCellExperiment. Transmission selections set Selection parameters collapsible box. Points can selected clicking dragging mouse draw rectangle around , repeatedly clicking make lasso (free-form) selection. First open application one FeatureAssayPlot panel one ReducedDimensionPlot panel, spanning half application window) FeatureAssayPlot panel, click expand Data parameters collapsible box Y-axis feature, type select CD3D. X-axis, select Column data, X-axis column data, select Cluster. FeatureAssayPlot panel, use mouse drag rectangle around points logcount expression value (y-axis) approximately 0.5 4. ReducedDimensionPlot panel, click expand Data parameters collapsible box Type, choose TSNE. ReducedDimensionPlot panel, click expand Visual parameters collapsible box, make sure Color checkbox ticked. Color , select Column data. dropdown menu appears, type select Cluster. ReducedDimensionPlot panel, click expand Selection parameters collapsible box. Receive column selection , select Feature assay plot 1.","code":"app <- iSEE(sce, initial = list(   FeatureAssayPlot(PanelWidth = 6L),   ReducedDimensionPlot(PanelWidth = 6L) )) shiny::runApp(app) app <- iSEE(sce, initial = list(   FeatureAssayPlot(     PanelWidth = 6L,     BrushData = list(       xmin = 0, xmax = 15,       ymin = 0.5, ymax = 4,       mapping = list(x = \"X\", y = \"Y\", group = \"GroupBy\"),       direction = \"xy\",       brushId = \"FeatureAssayPlot1_Brush\",       outputId = \"FeatureAssayPlot1\"     ),     XAxis = \"Column data\",     XAxisColumnData = \"Cluster\", YAxisFeatureName = \"CD3D\"   ),   ReducedDimensionPlot(     PanelWidth = 6L, Type = \"TSNE\",     ColorBy = \"Column data\",     ColorByColumnData = \"Cluster\",     ColumnSelectionRestrict = FALSE,     ColumnSelectionSource = \"FeatureAssayPlot1\"   ) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"recipe-9-verifying-the-cell-type-identity-of-clusters","dir":"Articles","previous_headings":"The cookbook","what":"Recipe 9: Verifying the cell type identity of clusters","title":"The iSEE cookbook","text":"Using pbmc3k data set, create scatter plots displaying (logcounts) expression values CD79A vs CD74, well Hinton plot cluster cell type assignment annotations. Select cells co-expressing CD79A CD74 scatter plot. cell type/cluster(s) correspond (color points Hinton plot)? Gene expression values can displayed using FeatureAssayPlot panel. select gene, specify ID provided row names SingleCellExperiment. Column (case cell) annotations can visualized using ColumnDataPlot panel. cluster labels available Cluster column colData(sce). Coarse-grained cell type labels available labels_main column. Transmission selections set Selection parameters collapsible box. Points can selected clicking dragging mouse draw rectangle around , repeatedly clicking make lasso (free-form) selection. First open application one FeatureAssayPlot panel one ColumnDataPlot panel, spanning half application window) FeatureAssayPlot panel, click expand Data parameters collapsible box. Y-axis feature, type select CD79A. X-axis, select Feature name, X-axis feature, type select CD74. ColumnDataPlot panel, click expand Data parameters collapsible box. Column interest (Y-axis), type select labels_main. X-axis, select Column data, Column interest (X-axis), select Cluster. FeatureAssayPlot panel, use mouse drag rectangle around points co-expressing CD79A CD74. ColumnDataPlot panel, click expand Selection parameters collapsible box. Receive column selection , select Feature assay plot 1. ColumnDataPlot panel, click expand Visual parameters collapsible box, make sure Color checkbox ticked. Color :, select Column selection.","code":"app <- iSEE(sce, initial = list(   FeatureAssayPlot(PanelWidth = 6L),   ColumnDataPlot(PanelWidth = 6L) )) shiny::runApp(app) app <- iSEE(sce, initial = list(   FeatureAssayPlot(     PanelWidth = 6L, XAxis = \"Feature name\",     YAxisFeatureName = \"CD79A\",     XAxisFeatureName = \"CD74\",     BrushData = list(       xmin = 0.3, xmax = 7,       ymin = 0.3, ymax = 7,       mapping = list(x = \"X\", y = \"Y\", colour = \"ColorBy\"),       direction = \"xy\", brushId = \"FeatureAssayPlot1_Brush\",       outputId = \"FeatureAssayPlot1\"     )   ),   ColumnDataPlot(     PanelWidth = 6L, XAxis = \"Column data\",     YAxis = \"labels_main\",     XAxisColumnData = \"Cluster\",     ColumnSelectionSource = \"FeatureAssayPlot1\",     ColumnSelectionRestrict = FALSE,     ColorBy = \"Column selection\"   ) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"recipe-10-using-modes-from-iseeu","dir":"Articles","previous_headings":"The cookbook","what":"Recipe 10: Using modes from iSEEu","title":"The iSEE cookbook","text":"Using pbmc3k data set, load iSEEu use modeReducedDim mode open app displaying reduced dimension representations stored SingleCellExperiment object. Color representations cell type assignment. cell type assignments available labels_fine column colData(sce) (coarse-grained assignments provided labels_main column). annotation color can specified calling iSEEu::modeReducedDim().","code":"app <- modeReducedDim(sce, colorBy = \"labels_main\")"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"recipe-11---including-a-tour","dir":"Articles","previous_headings":"The cookbook","what":"Recipe 11 - Including a tour","title":"The iSEE cookbook","text":"Using pbmc3k data set, display two tSNE representations next . first one, color cells logcounts expression level CD3D. second one, color cells logcounts expression level CD79B. Also include small tour starts welcome message, next walks two panels, giving informative message , finally ends concluding message user. Reduced dimension representations can displayed using ReducedDimensionPlot panels. reduced dimension representations SingleCellExperiment object can accessed name (reducedDimNames(sce) lists available representations). select gene, specify ID provided row names SingleCellExperiment. Point attributes can accessed Visual parameters collapsible box. display hide possible options, check corresponding checkboxes (Color, Shape, Size, Point). Tours provided via tour argument iSEE(). tour defined two-column data frame, columns named element intro. element column contains names UI elements, prefixed hash sign. details, including find name particular UI elements, can found Configuring iSEE apps vignette iSEE.","code":"tour <- data.frame(   element = c(     \"#Welcome\",     \"#ReducedDimensionPlot1\",     \"#ReducedDimensionPlot2\",     \"#Conclusion\"   ),   intro = c(     \"Welcome to this tour!\",     \"This is the first reduced dimension plot\",     \"And here is the second one\",     \"Thank you for taking this tour!\"   ),   stringsAsFactors = FALSE )  app <- iSEE(sce,   initial = list(     ReducedDimensionPlot(       PanelWidth = 6L, Type = \"TSNE\",       ColorBy = \"Feature name\",       ColorByFeatureName = \"CD3D\"     ),     ReducedDimensionPlot(       PanelWidth = 6L, Type = \"TSNE\",       ColorBy = \"Feature name\",       ColorByFeatureName = \"CD79B\"     )   ),   tour = tour )"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d03_iSEE_quickrecipes.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"The iSEE cookbook","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] iSEEu_1.20.0                iSEEhex_1.10.0              #>  [3] iSEE_2.20.0                 SingleCellExperiment_1.30.1 #>  [5] SummarizedExperiment_1.38.1 Biobase_2.68.0              #>  [7] GenomicRanges_1.60.0        GenomeInfoDb_1.44.1         #>  [9] IRanges_2.42.0              S4Vectors_0.46.0            #> [11] BiocGenerics_0.54.0         generics_0.1.4              #> [13] MatrixGenerics_1.20.0       matrixStats_1.5.0           #> [15] BiocStyle_2.36.0            #>  #> loaded via a namespace (and not attached): #>  [1] rlang_1.1.6             magrittr_2.0.3          shinydashboard_0.7.3    #>  [4] clue_0.3-66             GetoptLong_1.0.5        compiler_4.5.1          #>  [7] mgcv_1.9-3              png_0.1-8               systemfonts_1.2.3       #> [10] vctrs_0.6.5             pkgconfig_2.0.3         shape_1.4.6.1           #> [13] crayon_1.5.3            fastmap_1.2.0           XVector_0.48.0          #> [16] fontawesome_0.5.3       promises_1.3.3          rmarkdown_2.29          #> [19] UCSC.utils_1.4.0        shinyAce_0.4.4          ragg_1.4.0              #> [22] xfun_0.53               cachem_1.1.0            jsonlite_2.0.0          #> [25] listviewer_4.0.0        later_1.4.2             DelayedArray_0.34.1     #> [28] parallel_4.5.1          cluster_2.1.8.1         R6_2.6.1                #> [31] bslib_0.9.0             RColorBrewer_1.1-3      jquerylib_0.1.4         #> [34] Rcpp_1.1.0              iterators_1.0.14        knitr_1.50              #> [37] httpuv_1.6.16           Matrix_1.7-3            splines_4.5.1           #> [40] igraph_2.1.4            tidyselect_1.2.1        abind_1.4-8             #> [43] yaml_2.3.10             doParallel_1.0.17       codetools_0.2-20        #> [46] miniUI_0.1.2            lattice_0.22-7          tibble_3.3.0            #> [49] shiny_1.11.1            evaluate_1.0.4          desc_1.4.3              #> [52] circlize_0.4.16         pillar_1.11.0           BiocManager_1.30.26     #> [55] DT_0.33                 foreach_1.5.2           shinyjs_2.1.0           #> [58] ggplot2_3.5.2           scales_1.4.0            xtable_1.8-4            #> [61] glue_1.8.0              tools_4.5.1             hexbin_1.28.5           #> [64] colourpicker_1.3.0      fs_1.6.6                grid_4.5.1              #> [67] colorspace_2.1-1        nlme_3.1-168            GenomeInfoDbData_1.2.14 #> [70] vipor_0.4.7             cli_3.6.5               textshaping_1.0.1       #> [73] S4Arrays_1.8.1          viridisLite_0.4.2       ComplexHeatmap_2.24.1   #> [76] dplyr_1.1.4             gtable_0.3.6            rintrojs_0.3.4          #> [79] sass_0.4.10             digest_0.6.37           SparseArray_1.8.1       #> [82] ggrepel_0.9.6           rjson_0.2.23            htmlwidgets_1.6.4       #> [85] farver_2.1.2            memoise_2.0.1           htmltools_0.5.8.1       #> [88] pkgdown_2.1.3           lifecycle_1.0.4         httr_1.4.7              #> [91] shinyWidgets_0.9.0      GlobalOptions_0.1.2     mime_0.13"},{"path":[]},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d04_bonus_content.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Bonus content","text":"vignette contains additional examples things can done using iSEE, going beyond basic application interface.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d04_bonus_content.html","id":"iseede-and-iseepathways","dir":"Articles","previous_headings":"","what":"iSEEde and iSEEpathways","title":"Bonus content","text":"iSEEde iSEEpathways ideal companion packages exploring differential expression results (e.g.) bulk RNA-seq data. use macrophage dataset (derived work (Alasoo et al. 2018)), already run differential expression analysis using DESeq2 (Love, Huber, Anders 2014). processed dataset provided workshop package, processing code can found accompanying script. iSEEde iSEEpathways two new Bioconductor packages provide iSEE panels specifically aimed towards exploration differential expression pathway analysis results. precisely, iSEEde provides VolcanoPlot, MAPlot, LogFCLogFCPlot DETable panels. panels can configured extract data added via embedContrastResults() function (see processing script). Let’s look example:  Note easy switch different contrast panels.","code":"sce_macrophage <- readRDS(   system.file(\"datasets\", \"sce_macrophage_readytouse.RDS\",               package = \"iUSEiSEE\") )  library(\"iSEE\") library(\"iSEEde\") library(\"iSEEpathways\") library(\"AnnotationDbi\") library(\"org.Hs.eg.db\") #>  library(\"GO.db\") #> app <- iSEE(sce_macrophage, initial = list(   iSEEde::DETable(     ContrastName = \"IFNgTRUE.SL1344TRUE.DESeq2\",     HiddenColumns = c(\"baseMean\", \"lfcSE\", \"stat\")   ),   iSEEde::VolcanoPlot(ContrastName = \"IFNgTRUE.SL1344TRUE.DESeq2\"),   iSEEde::MAPlot(ContrastName = \"IFNgTRUE.SL1344TRUE.DESeq2\") )) app <- iSEE(sce_macrophage, initial = list(   iSEEde::DETable(     ContrastName = \"IFNgTRUE.SL1344TRUE.DESeq2\",     HiddenColumns = c(\"baseMean\", \"lfcSE\", \"stat\")   ),   iSEEde::VolcanoPlot(ContrastName = \"IFNgTRUE.SL1344TRUE.DESeq2\"),   iSEEde::MAPlot(ContrastName = \"IFNgTRUE.SL1344TRUE.DESeq2\"),   PathwaysTable(     ResultName = \"IFNgTRUE.SL1344TRUE.limma.fgsea\",     Selected = \"GO:0046324\"   ),   ComplexHeatmapPlot(     RowSelectionSource = \"PathwaysTable1\",     CustomRows = FALSE, ColumnData = \"condition_name\",     ClusterRows = TRUE, Assay = \"vst\"   ),   FgseaEnrichmentPlot(     ResultName = \"IFNgTRUE.SL1344TRUE.limma.fgsea\",     PathwayId = \"GO:0046324\"   ) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d04_bonus_content.html","id":"iseefier","dir":"Articles","previous_headings":"","what":"iSEEfier","title":"Bonus content","text":"Let’s say interested visualizing expression list specific marker genes one view, maybe created different initial states separately, like visualize instance. previously learned, can lot tasks launching default interface iSEE(sce), adding/removing panels desired. can involve multiple manual steps (selecting gene interest, color specific colData column, …), execution multiple lines setup code. iSEEfier package streamlines process starting (, firing ) iSEE instance small chunk code, avoiding tedious way setting every iSEE panel individually. section, illustrate simple example use iSEEfier. use pbmc3k data worked workshop. start loading data: example, can interested visualizing expression GZMB, TGFB, CD28 genes . start providing couple parameters: Now can pass parameters iSEEinit() create customized initial configuration: can pass generated initial_1 list initial argument iSEE() call: look like:  visualizing expression genes, might want take notes (gene X expressed certain cell type/cluster others, maybe trying annotate cells annotation wasn’t available…). , used argument add_markdown_panel = TRUE. display MarkdownBoard panel can note observations without leaving app. can check initial’s content, included panels linked without running app view_initial_tiles() view_initial_network():   Another alternative network visualization use interactive widget provided visNetwork: also possible use iSEEfier combine multiple initial configurations one:  ?iSEEfier always friend whenever need documentation package/certain function use .","code":"library(\"iSEEfier\")  # import data sce <- readRDS(   file = system.file(\"datasets\", \"sce_pbmc3k.RDS\", package = \"iUSEiSEE\") )  sce #> class: SingleCellExperiment  #> dim: 32738 2643  #> metadata(0): #> assays(2): counts logcounts #> rownames(32738): MIR1302-10 FAM138A ... AC002321.2 AC002321.1 #> rowData names(19): ENSEMBL_ID Symbol_TENx ... FDR_cluster11 #>   FDR_cluster12 #> colnames(2643): Cell1 Cell2 ... Cell2699 Cell2700 #> colData names(24): Sample Barcode ... labels_ont cell_ontology_labels #> reducedDimNames(3): PCA TSNE UMAP #> mainExpName: NULL #> altExpNames(0): # define the list of genes feature_list_1 <- c(\"GZMB\", \"TGFB1\", \"CD28\") # define the cluster/cell type  cluster_1 <- \"labels_main\" # create an initial state with iSEEinit initial_1 <- iSEEinit(sce,                       features = feature_list_1,                       clusters = cluster_1,                       add_markdown_panel = TRUE) app <- iSEE(sce, initial = initial_1) # display a graphical representation of the initial configuration,  # where the panels are identified by their corresponding colors view_initial_tiles(initial = initial_1) # display a network visualization for the panels view_initial_network(initial_1, plot_format = \"igraph\") #> IGRAPH e6959ca DN-- 14 4 --  #> + attr: name (v/c), color (v/c) #> + edges from e6959ca (vertex names): #> [1] ReducedDimensionPlot1->ColumnDataPlot1   #> [2] ReducedDimensionPlot2->ColumnDataPlot1   #> [3] ReducedDimensionPlot3->ColumnDataPlot1   #> [4] ReducedDimensionPlot4->FeatureAssayPlot4 view_initial_network(initial_1, plot_format = \"visNetwork\") #> IGRAPH bba5cc9 DN-- 14 4 --  #> + attr: name (v/c), color (v/c) #> + edges from bba5cc9 (vertex names): #> [1] ReducedDimensionPlot1->ColumnDataPlot1   #> [2] ReducedDimensionPlot2->ColumnDataPlot1   #> [3] ReducedDimensionPlot3->ColumnDataPlot1   #> [4] ReducedDimensionPlot4->FeatureAssayPlot4 # create a second initial configuration feature_list_2 <- c(\"CD74\", \"CD79B\") initial_2 <- iSEEinit(sce,                       features = feature_list_2,                       clusters = cluster_1)  # merge with the previous one merged_config <- glue_initials(initial_1, initial_2) #> Merging together 2 `initial` configuration objects... #> Combining sets of 14, 10 different panels. #>  #> Dropping 1 of the original list of 24 (detected as duplicated entries) #>  #> Some names of the panels were specified by the same name, but this situation can be handled at runtime by iSEE #> (This is just a non-critical message) #>  #> Returning an `initial` configuration including 23 different panels. Enjoy! #> If you want to obtain a preview of the panels configuration, you can call `view_initial_tiles()` on the output of this function  # check out the content of merged_config view_initial_tiles(initial = merged_config)"},{"path":[]},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d04_bonus_content.html","id":"iseehub-iseeing-the-experimenthub-datasets","dir":"Articles","previous_headings":"iSEEhub & iSEEindex","what":"iSEEhub: iSEEing the ExperimentHub datasets","title":"Bonus content","text":"iSEEhub package provides custom landing page iSEE application interfacing Bioconductor ExperimentHub. landing page allows users browse ExperimentHub, select data set, download cache , import directly iSEE app.","code":"library(\"iSEE\") library(\"iSEEhub\") #> Loading required package: ExperimentHub #> Loading required package: AnnotationHub #> Loading required package: BiocFileCache #> Loading required package: dbplyr #>  #> Attaching package: 'AnnotationHub' #> The following object is masked from 'package:Biobase': #>  #>     cache  ehub <- ExperimentHub() app <- iSEEhub(ehub)"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d04_bonus_content.html","id":"iseeindex-one-instance-of-isee-to-explore-them-all","dir":"Articles","previous_headings":"iSEEhub & iSEEindex","what":"iSEEindex: one instance of iSEE to explore them all","title":"Bonus content","text":"iSEEindex provides interface collection data sets within single iSEE web-application. main functionality package define custom landing page allowing app maintainers list custom collection data sets users can select directly load objects iSEE web application. see configure app, create small example:  elaborate example (referring work (Rigby et al. 2023)) available https://rehwinkellab.shinyapps.io/ifnresource/. source can found https://github.com/kevinrue/IFNresource. Potential use cases can include: app present explore different datasets next publication app explore collection datasets collaboratively, consortium-like initiatives app mirror enhance content e.g. cellxgene data portal","code":"library(\"iSEE\") library(\"iSEEindex\")  bfc <- BiocFileCache(cache = tempdir())  dataset_fun <- function() {   x <- yaml::read_yaml(system.file(package = \"iSEEindex\", \"example.yaml\"))   x$datasets } initial_fun <- function() {   x <- yaml::read_yaml(system.file(package = \"iSEEindex\", \"example.yaml\"))   x$initial } app <- iSEEindex(bfc, dataset_fun, initial_fun)"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d04_bonus_content.html","id":"tours-help-and-storytelling","dir":"Articles","previous_headings":"","what":"Tours: help and storytelling","title":"Bonus content","text":"Tours can essential tool satisfy two needs: Helping users navigate UI Telling story existing configuration simple example can demonstrated configuration: next chunk defines steps tour, specified anchoring point (element) content step (intro).","code":"sce <- readRDS(   system.file(\"datasets\", \"sce_pbmc3k.RDS\", package = \"iUSEiSEE\") )  initial_for_tour <- list(   ReducedDimensionPlot(PanelWidth = 3L),    RowDataTable(PanelWidth = 3L),   FeatureAssayPlot(PanelWidth = 3L),   ComplexHeatmapPlot(PanelWidth = 3L) ) tour <- data.frame(   element = c(     \"#Welcome\",     \"#ReducedDimensionPlot1\",     \"#RowDataTable1\",     \"#ComplexHeatmapPlot1\",     \"#FeatureAssayPlot1\",     \"#ReducedDimensionPlot1\",     \"#Conclusion\"),   intro = c(     \"Welcome to this tour!\",     \"This is the a reduced dimension plot\",     \"and this is a table\",     \"Why not a heatmap?\",     \"... and now we look at one individual feature.\",     \"Back to the a reduced dimension plot...\",     \"Thank you for taking this tour!\"),   stringsAsFactors = FALSE )  app <- iSEE(sce, initial = initial_for_tour, tour = tour)"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d04_bonus_content.html","id":"interoperability","dir":"Articles","previous_headings":"","what":"Interoperability","title":"Bonus content","text":"seen throughout workshop, iSEE works SummarizedExperiment objects, derivatives thereof. However, especially working single-cell data may already dataset available another format (Seurat object AnnData object). use iSEE objects, first converted SingleCellExperiment objects. Fortunately, good packages available perform conversion. exemplify , using data downloaded https://zenodo.org/records/10084595 (want follow along, download data unpack folder named datasets current working directory).","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d04_bonus_content.html","id":"from-seurat","dir":"Articles","previous_headings":"Interoperability","what":"From Seurat","title":"Bonus content","text":"","code":"library(\"Seurat\")  seurat_object <- readRDS(\"datasets/seurat_pbmc3k.RDS\") sce_from_seurat <- Seurat::as.SingleCellExperiment(   seurat_object ) sce_from_seurat  iSEE(sce_from_seurat)"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d04_bonus_content.html","id":"from-anndata","dir":"Articles","previous_headings":"Interoperability","what":"From AnnData","title":"Bonus content","text":"","code":"library(\"zellkonverter\")  sce_from_anndata <- zellkonverter::readH5AD(file = \"datasets/anndata_pbmc3k.h5ad\") sce_from_anndata  iSEE(sce_from_anndata)"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d04_bonus_content.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Bonus content","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] iSEEindex_1.6.0             iSEEhub_1.10.0              #>  [3] ExperimentHub_2.16.1        AnnotationHub_3.16.1        #>  [5] BiocFileCache_2.16.1        dbplyr_2.5.0                #>  [7] iSEEfier_1.4.0              GO.db_3.21.0                #>  [9] org.Hs.eg.db_3.21.0         AnnotationDbi_1.70.0        #> [11] iSEEpathways_1.6.0          iSEEde_1.6.0                #> [13] iSEE_2.20.0                 SingleCellExperiment_1.30.1 #> [15] SummarizedExperiment_1.38.1 Biobase_2.68.0              #> [17] GenomicRanges_1.60.0        GenomeInfoDb_1.44.1         #> [19] IRanges_2.42.0              S4Vectors_0.46.0            #> [21] BiocGenerics_0.54.0         generics_0.1.4              #> [23] MatrixGenerics_1.20.0       matrixStats_1.5.0           #> [25] BiocStyle_2.36.0            #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3      jsonlite_2.0.0          shape_1.4.6.1           #>   [4] magrittr_2.0.3          farver_2.1.2            rmarkdown_2.29          #>   [7] GlobalOptions_0.1.2     fs_1.6.6                ragg_1.4.0              #>  [10] vctrs_0.6.5             memoise_2.0.1           htmltools_0.5.8.1       #>  [13] S4Arrays_1.8.1          BiocBaseUtils_1.10.0    curl_7.0.0              #>  [16] SparseArray_1.8.1       sass_0.4.10             bslib_0.9.0             #>  [19] htmlwidgets_1.6.4       desc_1.4.3              fontawesome_0.5.3       #>  [22] httr2_1.2.1             listviewer_4.0.0        cachem_1.1.0            #>  [25] igraph_2.1.4            mime_0.13               lifecycle_1.0.4         #>  [28] iterators_1.0.14        pkgconfig_2.0.3         colourpicker_1.3.0      #>  [31] Matrix_1.7-3            R6_2.6.1                fastmap_1.2.0           #>  [34] GenomeInfoDbData_1.2.14 shiny_1.11.1            clue_0.3-66             #>  [37] digest_0.6.37           colorspace_2.1-1        paws.storage_0.9.0      #>  [40] DESeq2_1.48.1           textshaping_1.0.1       RSQLite_2.4.2           #>  [43] filelock_1.0.3          urltools_1.7.3.1        httr_1.4.7              #>  [46] abind_1.4-8             mgcv_1.9-3              compiler_4.5.1          #>  [49] bit64_4.6.0-1           withr_3.0.2             doParallel_1.0.17       #>  [52] BiocParallel_1.42.1     DBI_1.2.3               shinyAce_0.4.4          #>  [55] hexbin_1.28.5           rappdirs_0.3.3          DelayedArray_0.34.1     #>  [58] rjson_0.2.23            tools_4.5.1             vipor_0.4.7             #>  [61] httpuv_1.6.16           glue_1.8.0              nlme_3.1-168            #>  [64] promises_1.3.3          grid_4.5.1              cluster_2.1.8.1         #>  [67] gtable_0.3.6            XVector_0.48.0          stringr_1.5.1           #>  [70] BiocVersion_3.21.1      ggrepel_0.9.6           foreach_1.5.2           #>  [73] pillar_1.11.0           limma_3.64.3            later_1.4.2             #>  [76] rintrojs_0.3.4          circlize_0.4.16         splines_4.5.1           #>  [79] dplyr_1.1.4             lattice_0.22-7          bit_4.6.0               #>  [82] paws.common_0.8.5       tidyselect_1.2.1        ComplexHeatmap_2.24.1   #>  [85] locfit_1.5-9.12         Biostrings_2.76.0       miniUI_0.1.2            #>  [88] knitr_1.50              edgeR_4.6.3             xfun_0.53               #>  [91] shinydashboard_0.7.3    statmod_1.5.0           iSEEhex_1.10.0          #>  [94] DT_0.33                 stringi_1.8.7           visNetwork_2.1.2        #>  [97] UCSC.utils_1.4.0        yaml_2.3.10             shinyWidgets_0.9.0      #> [100] evaluate_1.0.4          codetools_0.2-20        tibble_3.3.0            #> [103] BiocManager_1.30.26     cli_3.6.5               xtable_1.8-4            #> [106] systemfonts_1.2.3       jquerylib_0.1.4         iSEEu_1.20.0            #> [109] Rcpp_1.1.0              triebeard_0.4.1         png_0.1-8               #> [112] parallel_4.5.1          pkgdown_2.1.3           ggplot2_3.5.2           #> [115] blob_1.2.4              viridisLite_0.4.2       scales_1.4.0            #> [118] purrr_1.1.0             crayon_1.5.3            GetoptLong_1.0.5        #> [121] rlang_1.1.6             KEGGREST_1.48.1         shinyjs_2.1.0"},{"path":[]},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"writing-isee-extensions","dir":"Articles","previous_headings":"","what":"Writing iSEE extensions","title":"Extending iSEE","text":"vignette, illustrate : Extend existing panel class new panel class Derive new panel class existing panel","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"load-example-data","dir":"Articles","previous_headings":"","what":"Load example data","title":"Extending iSEE","text":"","code":"library(\"iSEE\")  sce <- readRDS(   system.file(\"datasets\", \"sce_pbmc3k.RDS\", package = \"iUSEiSEE\") )"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"philosophy","dir":"Articles","previous_headings":"","what":"Philosophy","title":"Extending iSEE","text":"iSEE panels implemented S4 classes store state panel designated slots, functionality implemented S4 methods describe various behavioural aspects panel class. result, new classes can created simply inheritance existing classes, overwriting methods produce different behaviour.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"deriving-an-s4-class","dir":"Articles","previous_headings":"","what":"Deriving an S4 class","title":"Extending iSEE","text":"demo, let us create new class called ReducedDimensionHexagonPlot, inherits existing class ReducedDimensionPlot() (implemented iSEE package). objective produce panel displays information original ReducedDimensionPlot() panel, summarising data points hexagonal bins. One major motivation functionality arbitrarily large data sets comprising many data points may summarised modest number hexagonal bins, providing boost speed rendering plot. However, without caveats: Summarising can take many forms (e.g., counting, averaging). ideal number bins may different different data sets. proceed, new class needs least one additional slot store number hexagonal bins create (.e., resolution plot). properly initialise instances new class, new slot must populated default value event users specify bin resolution. , need create new method generic initialize() new class. set default resolution 20 hexagonal bins along axis.","code":"setClass(\"ReducedDimensionHexagonPlot\", contains=\"ReducedDimensionPlot\",           slots=c(BinResolution = \"numeric\")) setMethod(\"initialize\", \"ReducedDimensionHexagonPlot\", function(.Object, ...) {   args <- list(...)      args <- .emptyDefault(args, \"BinResolution\", 20)      do.call(callNextMethod, c(list(.Object), args)) })"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"creating-a-constructor-function","dir":"Articles","previous_headings":"","what":"Creating a constructor function","title":"Extending iSEE","text":"best practice give users function create objects particular class. Traditionally, function named identically class. example, function passes arguments new() function. standard practice iSEE, arguments constructor functions typically values various slots describe initial state panel. point, can already demonstrate functional new panel class… carbon copy parent class inherits !  can even tell ?!","code":"ReducedDimensionHexagonPlot <- function(...) {   new(\"ReducedDimensionHexagonPlot\", ...) } app <- iSEE(sce, initial = list(   ReducedDimensionHexagonPlot(PanelWidth = 6L),   ReducedDimensionPlot(PanelWidth = 6L) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"changing-the-public-panel-name","dir":"Articles","previous_headings":"","what":"Changing the public panel name","title":"Extending iSEE","text":"generic .fullName() declares label shown interface, top panel. Let us create method new class, gives different name, highlighting hexagonal binning plot. Let’s launch app see effect","code":"setMethod(\".fullName\", \"ReducedDimensionHexagonPlot\",            function(x) \"Hexagonal reduced dimension plot\") app <- iSEE(sce, initial = list(   ReducedDimensionHexagonPlot(PanelWidth = 6L),   ReducedDimensionPlot(PanelWidth = 6L) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"changing-the-background-panel-colour","dir":"Articles","previous_headings":"","what":"Changing the background panel colour","title":"Extending iSEE","text":"Similarly, generic .panelColor() declares background colour panel header (well colour brushes compatible panels). Let us create method new class, gives different colour. Let’s launch app see effect","code":"setMethod(\".panelColor\", \"ReducedDimensionHexagonPlot\", function(x) \"#991717\") app <- iSEE(sce, initial = list(   ReducedDimensionHexagonPlot(PanelWidth = 6L),   ReducedDimensionPlot(PanelWidth = 6L) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"altering-the-user-interface","dir":"Articles","previous_headings":"","what":"Altering the user interface","title":"Extending iSEE","text":"point, still component user interface control resolution value store new slot. number S4 methods control interface elements displayed various groups parameters located panel. , discussing parameter control size bins. Moreover, replace data points hexagonal bins, meaning visual parameters controlling size data points become useless. Thus, generic .defineVisualSizeInterface() natural choice use replacing size parameters parent ReducedDimensionHexagonPlot() class new HTML element displays numeric input allowing users change hexagonal bin resolution.","code":"setMethod(\".defineVisualSizeInterface\", \"ReducedDimensionHexagonPlot\", function(x) {   plot_name <- .getEncodedName(x)      tagList(     .numericInput.iSEE(x, \"BinResolution\", label=\"Bin resolution:\",                        min=1, value=x[[\"BinResolution\"]], step = 1)   ) }) app <- iSEE(sce, initial = list(   ReducedDimensionHexagonPlot(PanelWidth = 6L, VisualBoxOpen = TRUE, VisualChoices = \"Size\"),   ReducedDimensionPlot(PanelWidth = 6L, VisualBoxOpen = TRUE, VisualChoices = \"Size\") ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"altering-the-panel-output","dir":"Articles","previous_headings":"","what":"Altering the panel output","title":"Extending iSEE","text":"Time exciting challenging task: making panel produce different type plot! end, generic .generateDotPlot() key. Given panel state, axis labels, environment contains SummarizedExperiment() object possibly relevant values incoming selections,","code":"setMethod(\".generateDotPlot\", \"ReducedDimensionHexagonPlot\", function(x, labels, envir) {   plot_cmds <- list()   plot_cmds[[\"ggplot\"]] <- \"ggplot() +\"   color_lab <- \"Count\"   new_aes <- .buildAes()   plot_cmds[[\"hex\"]] <- sprintf(     \"ggplot2::geom_hex(%s, bins = %i, plot.data) +\",     new_aes,     as.integer(x[[\"BinResolution\"]])   )   plot_cmds[[\"theme_base\"]] <- \"theme_bw()\"      list(plot=.textEval(plot_cmds, envir), commands=plot_cmds) }) app <- iSEE(sce, initial = list(   ReducedDimensionHexagonPlot(PanelWidth = 6L, VisualBoxOpen = TRUE, VisualChoices = \"Size\"),   ReducedDimensionPlot(PanelWidth = 6L, VisualBoxOpen = TRUE, VisualChoices = \"Size\") ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"adding-reactivity","dir":"Articles","previous_headings":"","what":"Adding reactivity","title":"Extending iSEE","text":"point, users change bin resolution using newly added interface element, notice nothing seems happen. yet added Shiny observer responding particular event. .createObservers() generic invoked create observers instances panel class added user interface. .createProtectedParameterObservers() function provides convenient way create observers responding events change data plotted potentially break active multiple selections, . function automatically ensures change value interface element updated panel state triggers re-rendering panel plot. new observer place, can launch app one time, toy bin resolution watch panel plot re-rendered time.","code":"setMethod(\".createObservers\", \"ReducedDimensionHexagonPlot\", function(x, se, input, session, pObjects, rObjects) {     callNextMethod()      plot_name <- .getEncodedName(x)      .createProtectedParameterObservers(plot_name,         fields=c(\"BinResolution\"),         input=input, pObjects=pObjects, rObjects=rObjects)      invisible(NULL) }) app <- iSEE(sce, initial = list(   ReducedDimensionHexagonPlot(PanelWidth = 6L, VisualBoxOpen = TRUE, VisualChoices = \"Size\"),   ReducedDimensionPlot(PanelWidth = 6L) ))"},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"further-work","dir":"Articles","previous_headings":"","what":"Further work","title":"Extending iSEE","text":"point, many aspects plotting behaviour test adjust, making sure choices parameters presented end users sensible, combinations parameters handled without error. However, work represents many hours careful testing implementation far beyond scope short package demo. Adventurous souls may interested mature implementation ReducedDimensionHexPlot() panel class, implemented iSEEhex package. Source code can found GitHub page.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"additional-resources","dir":"Articles","previous_headings":"","what":"Additional resources","title":"Extending iSEE","text":"book Extending iSEE original effort developers provide guidance writing iSEE extensions using example use cases illustration. recent iSEETheBook launched new effort provide comprehensive view ecosystem three major groups users: End users interacting graphical user interface web browser. Developers scripted web-applications using iSEE showcase data sets. Developers extensions contributing new functionality packages iSEE ecosystem. iSEE website place watch links additional resources.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/articles/d05_extending_iSEE.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Extending iSEE","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] iSEE_2.20.0                 SingleCellExperiment_1.30.1 #>  [3] SummarizedExperiment_1.38.1 Biobase_2.68.0              #>  [5] GenomicRanges_1.60.0        GenomeInfoDb_1.44.1         #>  [7] IRanges_2.42.0              S4Vectors_0.46.0            #>  [9] BiocGenerics_0.54.0         generics_0.1.4              #> [11] MatrixGenerics_1.20.0       matrixStats_1.5.0           #> [13] BiocStyle_2.36.0            #>  #> loaded via a namespace (and not attached): #>  [1] rlang_1.1.6             magrittr_2.0.3          shinydashboard_0.7.3    #>  [4] clue_0.3-66             GetoptLong_1.0.5        compiler_4.5.1          #>  [7] mgcv_1.9-3              png_0.1-8               systemfonts_1.2.3       #> [10] vctrs_0.6.5             pkgconfig_2.0.3         shape_1.4.6.1           #> [13] crayon_1.5.3            fastmap_1.2.0           XVector_0.48.0          #> [16] fontawesome_0.5.3       promises_1.3.3          rmarkdown_2.29          #> [19] UCSC.utils_1.4.0        shinyAce_0.4.4          ragg_1.4.0              #> [22] xfun_0.53               cachem_1.1.0            jsonlite_2.0.0          #> [25] listviewer_4.0.0        later_1.4.2             DelayedArray_0.34.1     #> [28] parallel_4.5.1          cluster_2.1.8.1         R6_2.6.1                #> [31] bslib_0.9.0             RColorBrewer_1.1-3      jquerylib_0.1.4         #> [34] Rcpp_1.1.0              iterators_1.0.14        knitr_1.50              #> [37] httpuv_1.6.16           Matrix_1.7-3            splines_4.5.1           #> [40] igraph_2.1.4            tidyselect_1.2.1        abind_1.4-8             #> [43] yaml_2.3.10             doParallel_1.0.17       codetools_0.2-20        #> [46] miniUI_0.1.2            lattice_0.22-7          tibble_3.3.0            #> [49] shiny_1.11.1            evaluate_1.0.4          desc_1.4.3              #> [52] circlize_0.4.16         pillar_1.11.0           BiocManager_1.30.26     #> [55] DT_0.33                 foreach_1.5.2           shinyjs_2.1.0           #> [58] ggplot2_3.5.2           scales_1.4.0            xtable_1.8-4            #> [61] glue_1.8.0              tools_4.5.1             colourpicker_1.3.0      #> [64] fs_1.6.6                grid_4.5.1              colorspace_2.1-1        #> [67] nlme_3.1-168            GenomeInfoDbData_1.2.14 vipor_0.4.7             #> [70] cli_3.6.5               textshaping_1.0.1       S4Arrays_1.8.1          #> [73] viridisLite_0.4.2       ComplexHeatmap_2.24.1   dplyr_1.1.4             #> [76] gtable_0.3.6            rintrojs_0.3.4          sass_0.4.10             #> [79] digest_0.6.37           SparseArray_1.8.1       ggrepel_0.9.6           #> [82] rjson_0.2.23            htmlwidgets_1.6.4       farver_2.1.2            #> [85] htmltools_0.5.8.1       pkgdown_2.1.3           lifecycle_1.0.4         #> [88] httr_1.4.7              shinyWidgets_0.9.0      GlobalOptions_0.1.2     #> [91] mime_0.13"},{"path":"https://iSEE.github.io/iUSEiSEE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Federico Marini. Author, maintainer. Kevin Rue-Albrecht. Author. Charlotte Soneson. Author. Aaron Lun. Author. Najla Abassi. Author.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marini F, Rue-Albrecht K, Soneson C, Lun , Abassi N (2025). iUSEiSEE: Workshop learn use iSEE package. R package version 1.0.0, https://iSEE.github.io/iUSEiSEE/.","code":"@Manual{,   title = {iUSEiSEE: A Workshop to learn how to use the iSEE package},   author = {Federico Marini and Kevin Rue-Albrecht and Charlotte Soneson and Aaron Lun and Najla Abassi},   year = {2025},   note = {R package version 1.0.0},   url = {https://iSEE.github.io/iUSEiSEE/}, }"},{"path":"https://iSEE.github.io/iUSEiSEE/index.html","id":"iuseisee","dir":"","previous_headings":"","what":"iUSEiSEE","title":"iUSEiSEE","text":"iSEE package flexible, powerful extensible application explore dataset stored SummarizedExperiment object. turn, dataset can shaped one numerical matrices (“rectangular” datasets) can easily put SummarizedExperiment object. includes many types bulk, single cell spatially resolved biological data, well many non-biological data types. iSEE enables multitude panels gain -depth insight data; combining interactivity reproducibility, provides ideal tool deeper dives data.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install","title":"iUSEiSEE","text":"follow workshop, first install R RStudio, e.g. following instructions . Next, within R session, workshop package required dependencies can installed GitHub follows:","code":"install.packages(\"BiocManager\") BiocManager::install(\"iSEE/iUSEiSEE\",                      dependencies = TRUE,                      build_vignettes = TRUE)"},{"path":"https://iSEE.github.io/iUSEiSEE/index.html","id":"how-to-run-this-workshop","dir":"","previous_headings":"","what":"How to run this workshop","title":"iUSEiSEE","text":"Clone GitHub repository local folder computer. Open iUSEiSEE.Rproj project file RStudio. Navigate vignettes folder. Open individual R Markdown files execute content live!","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/index.html","id":"schedule","dir":"","previous_headings":"","what":"Schedule","title":"iUSEiSEE","text":"Installation dependencies tech check. Retrieval inspection example data. Overview iSEE: panel panel, learning Data + Visual + Selection parameters. Hands-practice using recipes iSEE cookbook. Exploring extension packages iSEE universe: iSEEde iSEEpathways differential expression pathways, iSEEhub iSEEindex managing multiple datasets. Easy generation initial configurations iSEEfier. Definition new, custom panel type.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/index.html","id":"need-help","dir":"","previous_headings":"","what":"Need help?","title":"iUSEiSEE","text":"encounter problem running iUSEiSEE, please open issue describe problem. Make sure provide reproducible example, including session info.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute","title":"iUSEiSEE","text":"like contribute iUSEiSEE, can sending pull request repository. large changes, encourage first open issue discuss intended contribution.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"iUSEiSEE","text":"Please note iSEE project (including iUSEiSEE) released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://iSEE.github.io/iUSEiSEE/reference/iUSEiSEE-pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"iUSEiSEE: Learning to use the package iSEE — iUSEiSEE-pkg","title":"iUSEiSEE: Learning to use the package iSEE — iUSEiSEE-pkg","text":"package provides material fully fledged one-day workshop iSEE package.","code":""},{"path":[]},{"path":"https://iSEE.github.io/iUSEiSEE/reference/iUSEiSEE-pkg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"iUSEiSEE: Learning to use the package iSEE — iUSEiSEE-pkg","text":"Maintainer: Federico Marini marinif@uni-mainz.de (ORCID) Authors: Kevin Rue-Albrecht kevinrue67@gmail.com (ORCID) Charlotte Soneson charlottesoneson@gmail.com (ORCID) Aaron Lun infinite.monkeys..keyboards@gmail.com (ORCID) Najla Abassi abassi.nejla96@gmail.com (ORCID)","code":""}]
